/**
 * This file was generated by Payload.
 * It is provided for reference only and should not be modified.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    categories: Category;
    authors: Author;
    articles: Article;
    presentations: Presentation;
    media: Media;
  };
  collectionsSelect: {
    users: UsersSelect;
    categories: CategoriesSelect;
    authors: AuthorsSelect;
    articles: ArticlesSelect;
    presentations: PresentationsSelect;
    media: MediaSelect;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
}

export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}

export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}

export interface Category {
  id: string;
  name: string;
  order: number;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}

export interface Author {
  id: string;
  name: string;
  type: 'equipe' | 'contributeur' | 'auteur';
  slug: string;
  description: string;
  photo: string | Media;
  updatedAt: string;
  createdAt: string;
}

export interface Article {
  id: string;
  titre: string;
  slug: string;
  date: string;
  category: string | Category;
  authors: (string | Author)[];
  photoPrincipale: string | Media;
  presentation?: any;
  article?: any;
  content_html?: string | null;
  updatedAt: string;
  createdAt: string;
}

export interface Presentation {
  id: string;
  title: string;
  shortVersion?: any;
  longVersion?: any;
  logo?: (string | Media) | null;
  shortVersion_html?: string | null;
  longVersion_html?: string | null;
  updatedAt: string;
  createdAt: string;
}

export interface Media {
  id: string;
  alt: string;
  legend?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  width?: number | null;
  height?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
    };
  };
}

export interface UsersSelect<T extends boolean = true> {
  id?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  password?: T;
}

export interface CategoriesSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  order?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}

export interface AuthorsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  type?: T;
  slug?: T;
  description?: T;
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}

export interface ArticlesSelect<T extends boolean = true> {
  id?: T;
  titre?: T;
  slug?: T;
  date?: T;
  category?: T;
  authors?: T;
  photoPrincipale?: T;
  presentation?: T;
  article?: T;
  content_html?: T;
  updatedAt?: T;
  createdAt?: T;
}

export interface PresentationsSelect<T extends boolean = true> {
  id?: T;
  title?: T;
  shortVersion?: T;
  longVersion?: T;
  logo?: T;
  shortVersion_html?: T;
  longVersion_html?: T;
  updatedAt?: T;
  createdAt?: T;
}

export interface MediaSelect<T extends boolean = true> {
  id?: T;
  alt?: T;
  legend?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  width?: T;
  height?: T;
  sizes?: T;
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}