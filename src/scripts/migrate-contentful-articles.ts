import { createContentfulClient } from "./utils/contentful-client";
import {
  initializePayloadForMigration,
  closePayloadConnections,
  logEnvironmentStatus,
  logMigrationStats,
  addDelay,
  checkIfExists,
  generateSlug,
  findMediaByContentfulId,
  findAuthorByContentfulId,
  findCategoryByContentfulId,
  findCategoryByName,
  convertContentfulRichTextToHtml,
  convertContentfulRichTextToLexical,
  MigrationStats,
  MigrationOptions,
} from "./utils/migration-helpers";

// Types pour Contentful Articles (bas√© sur la structure r√©elle)
interface ContentfulArticle {
  sys: {
    id: string;
    createdAt: string;
    updatedAt: string;
  };
  fields: {
    titre: string;
    slug?: string;
    dateDePublication: string;
    categorie: string; // Nom de la cat√©gorie sous forme de string
    auteur: Array<{
      sys: {
        id: string;
      };
    }>;
    photoPrincipale: {
      sys: {
        id: string;
      };
    };
    presentation?: string; // Peut √™tre une string simple
    article?: any; // Rich text
  };
}

interface ContentfulResponse {
  items: ContentfulArticle[];
  total: number;
  skip: number;
  limit: number;
}

async function migrateContentfulArticles(options: MigrationOptions = {}) {
  const { isProduction = false, batchSize = 50, delay = 200 } = options;
  const envLabel = isProduction ? "PRODUCTION" : "LOCAL";

  console.log(
    `üöÄ D√©marrage de la migration des articles Contentful vers Payload (${envLabel})`
  );

  // Afficher le statut des variables d'environnement
  logEnvironmentStatus(isProduction);

  // Initialiser les clients
  const contentful = createContentfulClient();
  const payload = await initializePayloadForMigration(options);

  const stats: MigrationStats = { processed: 0, skipped: 0, errors: 0 };

  try {
    let skip = 0;

    while (true) {
      console.log(
        `üìÑ R√©cup√©ration des articles ${skip + 1} √† ${skip + batchSize}...`
      );

      // R√©cup√©rer les articles de Contentful
      const response = (await contentful.getEntries({
        content_type: "article", // Type de contenu article dans Contentful
        skip,
        limit: batchSize,
        include: 2, // Inclure les r√©f√©rences (auteurs, cat√©gories, images)
      })) as any as ContentfulResponse;

      if (response.items.length === 0) {
        break;
      }

      console.log(`‚úÖ ${response.items.length} articles trouv√©s`);

      // Traiter chaque article
      for (const article of response.items) {
        try {
          const { fields, sys } = article;

          if (!fields.titre) {
            console.log(`‚ö†Ô∏è  Pas de titre pour l'article ${sys.id}`);
            stats.errors++;
            continue;
          }

          // V√©rifier si l'article existe d√©j√† dans Payload
          const exists = await checkIfExists(
            payload,
            "articles",
            "contentfulId",
            sys.id
          );

          if (exists) {
            console.log(`‚è≠Ô∏è  Article d√©j√† migr√©: ${fields.titre}`);
            stats.skipped++;
            continue;
          }

          // Chercher la photo principale
          let photoPrincipaleId = null;
          if (fields.photoPrincipale?.sys?.id) {
            // @ts-expect-error
            photoPrincipaleId = await findMediaByContentfulId(
              payload,
              fields.photoPrincipale.sys.id
            );

            if (!photoPrincipaleId) {
              console.log(
                `‚ö†Ô∏è  Photo principale non trouv√©e pour "${fields.titre}" (Contentful ID: ${fields.photoPrincipale.sys.id})`
              );
              // On continue quand m√™me, mais on note l'erreur
            }
          }

          // Chercher la cat√©gorie par nom
          let categoryId = null;
          if (fields.categorie) {
            // @ts-expect-error
            categoryId = await findCategoryByName(payload, fields.categorie);

            if (!categoryId) {
              console.log(
                `‚ùå Cat√©gorie "${fields.categorie}" non trouv√©e pour "${fields.titre}"`
              );
              stats.errors++;
              continue; // Article obligatoire d'avoir une cat√©gorie
            }
          } else {
            console.log(`‚ùå Pas de cat√©gorie d√©finie pour "${fields.titre}"`);
            stats.errors++;
            continue;
          }

          // Chercher les auteurs
          const authorIds: string[] = [];
          if (fields.auteur && Array.isArray(fields.auteur)) {
            for (const authorRef of fields.auteur) {
              if (authorRef.sys?.id) {
                const authorId = await findAuthorByContentfulId(
                  payload,
                  authorRef.sys.id
                );
                if (authorId) {
                  authorIds.push(authorId);
                } else {
                  console.log(
                    `‚ö†Ô∏è  Auteur non trouv√© pour "${fields.titre}" (Contentful ID: ${authorRef.sys.id})`
                  );
                }
              }
            }
          }

          if (authorIds.length === 0) {
            console.log(`‚ùå Aucun auteur valide trouv√© pour "${fields.titre}"`);
            stats.errors++;
            continue; // Article obligatoire d'avoir au moins un auteur
          }

          // Utiliser le slug de Contentful ou en g√©n√©rer un
          const slug = fields.slug || generateSlug(fields.titre);

          // Convertir le rich text Contentful vers Lexical et HTML
          // Presentation peut √™tre string ou rich text
          let presentationLexical = null;
          if (fields.presentation) {
            if (typeof fields.presentation === "string") {
              // Si c'est une string, on la convertit en format Lexical simple
              // @ts-expect-error
              presentationLexical = {
                root: {
                  children: [
                    {
                      children: [
                        {
                          detail: 0,
                          format: 0,
                          mode: "normal",
                          style: "",
                          text: fields.presentation,
                          type: "text",
                          version: 1,
                        },
                      ],
                      direction: null,
                      format: "",
                      indent: 0,
                      type: "paragraph",
                      version: 1,
                    },
                  ],
                  direction: null,
                  format: "",
                  indent: 0,
                  type: "root",
                  version: 1,
                },
              };
            } else {
              // Si c'est du rich text, on le convertit
              presentationLexical = await convertContentfulRichTextToLexical(
                fields.presentation,
                payload
              );
            }
          }

          // Debug: afficher la structure du rich text
          // if (fields.article) {
          //   console.log(`\nüîç DEBUG - Structure rich text pour "${fields.titre}":`)
          //   console.log('Raw article data:', JSON.stringify(fields.article, null, 2))
          // }

          const articleLexical = fields.article
            ? await convertContentfulRichTextToLexical(fields.article, payload)
            : null;

          // Debug: afficher le r√©sultat de la conversion Lexical
          // if (articleLexical) {
          //   console.log(`\nüîÑ DEBUG - Conversion Lexical pour "${fields.titre}":`)
          //   console.log('Lexical result:', JSON.stringify(articleLexical, null, 2))
          // }

          const articleHtml = fields.article
            ? convertContentfulRichTextToHtml(fields.article)
            : "";

          // Pr√©parer les donn√©es pour Payload
          const articleData = {
            titre: fields.titre,
            slug: slug,
            date: fields.dateDePublication || sys.createdAt,
            category: categoryId,
            authors: authorIds,
            photoPrincipale: photoPrincipaleId,
            presentation: presentationLexical, // Rich text au format Lexical
            article: articleLexical, // Rich text au format Lexical
            content_html: articleHtml, // Version HTML pour compatibilit√©/recherche
            // Champ personnalis√© pour tra√ßabilit√©
            contentfulId: sys.id,
          };

          // Si on n'a pas de photo principale, on exclut le champ (optionnel mais recommand√©)
          if (!photoPrincipaleId) {
            // @ts-expect-error
            delete articleData.photoPrincipale;
          }

          // Cr√©er l'article dans Payload
          const payloadArticle = await payload.create({
            collection: "articles",
            data: articleData,
          });

          console.log(
            `‚úÖ Article migr√©: "${fields.titre}" ‚Üí ${payloadArticle.id}`
          );
          console.log(
            `   üìÇ Cat√©gorie: ‚úÖ | üë• Auteurs: ${authorIds.length} | üñºÔ∏è  Photo: ${photoPrincipaleId ? "‚úÖ" : "‚ùå"}`
          );
          stats.processed++;

          // Pause pour √©viter de surcharger les APIs
          await addDelay(delay);

          // Arr√™ter apr√®s le premier article migr√© avec succ√®s
          // console.log(`üõë Test termin√© apr√®s 1 article migr√© avec succ√®s`)
          // return
        } catch (error: any) {
          console.error(
            `‚ùå Erreur lors de la migration de l'article ${article.sys.id}:`,
            error
          );

          // Debug: afficher les d√©tails de l'erreur de validation
          if (error.data && error.data.errors) {
            console.log(`\nüîç DEBUG - Erreurs de validation d√©taill√©es:`);
            console.log(JSON.stringify(error.data.errors, null, 2));
          }

          if (error.cause && error.cause.errors) {
            console.log(`\nüîç DEBUG - Erreurs cause d√©taill√©es:`);
            console.log(JSON.stringify(error.cause.errors, null, 2));
          }

          stats.errors++;
          // return;
          continue;
        }
      }

      skip += batchSize;

      // √âviter de surcharger l'API
      if (response.items.length < batchSize) {
        break;
      }
    }

    // Afficher les statistiques finales
    logMigrationStats(stats, "articles", isProduction);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la migration ${envLabel}:`, error);
    throw error;
  } finally {
    // Fermer les connexions
    await closePayloadConnections(payload);
  }
}

// Ex√©cuter le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  const isProduction = process.argv.includes("--prod");

  migrateContentfulArticles({ isProduction })
    .then(() => {
      console.log(
        `‚úÖ Script de migration articles ${isProduction ? "PRODUCTION" : "LOCAL"} termin√©`
      );
      process.exit(0);
    })
    .catch(error => {
      console.error(`‚ùå Erreur fatale lors de la migration articles:`, error);
      process.exit(1);
    });
}

export default migrateContentfulArticles;
